Description: Gradle 4 compatibility
 Some APIs buildSrc uses are from Gradle 4 and but we have Gradle 3.4.1 only.
Author: Kai-Chung Yan
Forwarded: not-needed
--- a/buildSrc/src/main/groovy/org/gradle/modules/ClasspathManifestPatcher.groovy
+++ b/buildSrc/src/main/groovy/org/gradle/modules/ClasspathManifestPatcher.groovy
@@ -126,7 +126,8 @@
 
     private File unpack(File file) {
         def unpackDir = new File(temporaryDir, file.name)
-        project.sync { CopySpec spec ->
+        org.apache.commons.io.FileUtils.cleanDirectory(unpackDir)
+        project.copy { CopySpec spec ->
             spec.into(unpackDir)
             spec.from(project.zipTree(file))
         }
--- a/buildSrc/src/main/groovy/org/gradle/modules/JarPatcher.groovy
+++ b/buildSrc/src/main/groovy/org/gradle/modules/JarPatcher.groovy
@@ -73,7 +73,8 @@
 
     private File unpack(File file) {
         def unpackDir = new File(temporaryDir, "excluding-" + file.name)
-        project.sync(new Action<CopySpec>() {
+        org.apache.commons.io.FileUtils.cleanDirectory(unpackDir)
+        project.copy(new Action<CopySpec>() {
             @Override
             void execute(CopySpec spec) {
                 spec.into(unpackDir)
--- a/buildSrc/src/main/groovy/org/gradle/plugins/classycle/ClassyclePlugin.groovy
+++ b/buildSrc/src/main/groovy/org/gradle/plugins/classycle/ClassyclePlugin.groovy
@@ -42,7 +42,7 @@
             def taskName = sourceSet.getTaskName('classycle', null)
             project.tasks.create(taskName, Classycle, { Classycle task ->
                 task.reportName = sourceSet.name
-                task.classesDirs = sourceSet.output.classesDirs
+                task.classesDirs = sourceSet.output
                 task.reportDir = reporting.file('classycle')
                 task.dependsOn(sourceSet.output)
             } as Action<Classycle>)
--- a/buildSrc/build.gradle
+++ b/buildSrc/build.gradle
@@ -38,6 +38,7 @@
 }
 
 sourceSets.main.groovy { exclude 'org/gradle/binarycompatibility/**' }
+sourceSets.main.groovy { exclude '**/GenerateDefaultImportsTask.*' }
 
 dependencies {
     compile 'org.ow2.asm:asm-all:6.2.1@jar'
@@ -45,6 +46,8 @@
     compile 'com.google.guava:guava:14.0.1@jar'
     compile 'commons-lang:commons-lang:2.6@jar'
     compile localGroovy()
+    compile 'com.google.code.findbugs:jsr305:debian'
+    compile 'commons-io:commons-io:debian'
     testCompile 'junit:junit:4.12@jar'
     testCompile 'org.spockframework:spock-core:1.0-groovy-2.4@jar', 'cglib:cglib-nodep:3.2.5', 'org.objenesis:objenesis:1.2'
     testCompile 'org.hamcrest:hamcrest-core:1.3'
--- a/build.gradle
+++ b/build.gradle
@@ -175,7 +175,6 @@
 }
 
 apply from: "gradle/buildScanUserData.gradle"
-apply from: "gradle/taskCacheBuildScanUserData.gradle"
 apply from: "gradle/versioning.gradle"
 apply from: "gradle/dependencies.gradle"
 apply from: "gradle/wrapper.gradle"
@@ -197,13 +196,6 @@
         maven { url 'file:///usr/share/maven-repo' }
         maven { url "file://${rootDir}/debian/maven-repo" }
     }
-
-    // patchExternalModules lives in the root project - we need to activate normalization there, too.
-    normalization {
-        runtimeClasspath {
-            ignore 'org/gradle/build-receipt.properties'
-        }
-    }
 }
 
 subprojects {
--- a/gradle/integTest.gradle
+++ b/gradle/integTest.gradle
@@ -31,7 +31,6 @@
 
 integTestTasks.all { IntegrationTest task ->
     group = "verification"
-    testClassesDirs = sourceSets.integTest.output.classesDirs
     classpath = sourceSets.integTest.runtimeClasspath
 }
 
--- a/gradle/performanceTest.gradle
+++ b/gradle/performanceTest.gradle
@@ -129,7 +129,6 @@
 
 performanceTestTasks.all { PerformanceTest task ->
     withPerformanceDb(task)
-    testClassesDirs = sourceSets.performanceTest.output.classesDirs
     classpath = sourceSets.performanceTest.runtimeClasspath
     dependsOn prepareSamples
     mustRunAfter tasks.withType(ProjectGeneratorTask)
--- a/gradle/crossVersionTest.gradle
+++ b/gradle/crossVersionTest.gradle
@@ -36,7 +36,6 @@
 
 crossVersionTestTasks.all { CrossVersionTest task ->
     group = "verification"
-    testClassesDirs = sourceSets.crossVersionTest.output.classesDirs
     classpath = sourceSets.crossVersionTest.runtimeClasspath
     requiresLibsRepo = true
 }
--- a/gradle/taskProperties.gradle
+++ b/gradle/taskProperties.gradle
@@ -1,7 +1,7 @@
 afterEvaluate {
     task validateTaskProperties(type: org.gradle.plugin.devel.tasks.ValidateTaskProperties) { validator ->
         validator.dependsOn sourceSets.main.output
-        validator.classes = sourceSets.main.output.classesDirs
+        validator.classes = project.files(sourceSets.main.output.classDir)
         validator.classpath = sourceSets.main.runtimeClasspath
         validator.outputFile = "$buildDir/reports/task-properties/report.txt"
         validator.failOnWarning = true
--- a/subprojects/wrapper/wrapper.gradle
+++ b/subprojects/wrapper/wrapper.gradle
@@ -27,12 +27,6 @@
     wrapperBuildReceipt = "build-receipt.properties"
 }
 
-normalization {
-    runtimeClasspath {
-        ignore wrapperBuildReceipt
-    }
-}
-
 task wrapperBuildReceiptResource(type: Copy) {
     from {
         tasks.getByPath(':createBuildReceipt').outputs.files
--- a/subprojects/smoke-test/smoke-test.gradle
+++ b/subprojects/smoke-test/smoke-test.gradle
@@ -42,7 +42,6 @@
 tasks.create('smokeTest', SmokeTest) { SmokeTest task ->
     group = "Verification"
     description = "Runs Smoke tests"
-    testClassesDirs = sourceSets.smokeTest.output.classesDirs
     classpath = sourceSets.smokeTest.runtimeClasspath
     maxParallelForks = 1 // those tests are pretty expensive, we shouldn't execute them concurrently
 }
--- a/subprojects/soak/soak.gradle
+++ b/subprojects/soak/soak.gradle
@@ -13,7 +13,6 @@
 }
 
 task('soakTest', type: org.gradle.testing.SoakTest) {
-    testClassesDirs = sourceSets.integTest.output.classesDirs
     classpath = sourceSets.integTest.runtimeClasspath
     systemProperties['org.gradle.soaktest'] = 'true'
     options {
