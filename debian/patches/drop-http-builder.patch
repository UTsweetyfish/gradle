From: Markus Koschany <apo@debian.org>
Date: Sat, 18 Nov 2017 22:52:22 +0100
Subject: drop http builder

http-builder is not in Debian yet
---
 buildSrc/build.gradle                              |  6 +-
 .../testing/DistributedPerformanceTest.groovy      | 81 ++--------------------
 2 files changed, 7 insertions(+), 80 deletions(-)

--- a/buildSrc/build.gradle
+++ b/buildSrc/build.gradle
@@ -45,10 +45,6 @@
     compile 'com.google.guava:guava-jdk5:14.0.1@jar'
     compile 'commons-lang:commons-lang:2.6@jar'
     compile localGroovy()
-    compile('org.codehaus.groovy.modules.http-builder:http-builder:0.7.2') {
-        exclude(module: 'groovy')
-        exclude(module: 'xercesImpl')
-    }
     testCompile 'junit:junit:4.12@jar'
     testCompile 'org.spockframework:spock-core:1.0-groovy-2.4@jar', 'cglib:cglib-nodep:3.2.5', 'org.objenesis:objenesis:1.2'
     testCompile 'org.hamcrest:hamcrest-core:1.3'
--- a/buildSrc/src/main/groovy/org/gradle/testing/DistributedPerformanceTest.groovy
+++ b/buildSrc/src/main/groovy/org/gradle/testing/DistributedPerformanceTest.groovy
@@ -22,8 +22,6 @@
 import groovy.transform.TypeChecked
 import groovy.transform.TypeCheckingMode
 import groovy.xml.XmlUtil
-import groovyx.net.http.ContentType
-import groovyx.net.http.RESTClient
 import org.gradle.api.GradleException
 import org.gradle.api.tasks.Input
 import org.gradle.api.tasks.Optional
@@ -73,7 +71,7 @@
     @OutputFile
     File scenarioReport
 
-    RESTClient client
+    GroovyObject client
 
     List<String> scheduledBuilds = Lists.newArrayList()
 
@@ -160,36 +158,7 @@
 
     @TypeChecked(TypeCheckingMode.SKIP)
     private void schedule(Scenario scenario, String lastChangeId) {
-        def buildRequest = """
-                <build${branchName ? " branchName=\"${branchName}\"" : ""}>
-                    <buildType id="${buildTypeId}"/>
-                    <properties>
-                        <property name="scenario" value="${scenario.id}"/>
-                        <property name="templates" value="${scenario.templates.join(' ')}"/>
-                        <property name="baselines" value="${baselines?:'defaults'}"/>
-                        <property name="warmups" value="${warmups!=null?:'defaults'}"/>
-                        <property name="runs" value="${runs!=null?:'defaults'}"/>
-                        <property name="checks" value="${checks?:'all'}"/>
-                        <property name="channel" value="${channel?:'commits'}"/>
-                    </properties>
-                    ${renderLastChange(lastChangeId)}
-                </build>
-            """
-        logger.info("Scheduling $scenario.id, estimated runtime: $scenario.estimatedRuntime, coordinatorBuildId: $coordinatorBuildId, lastChangeId: $lastChangeId, build request: $buildRequest")
-        def response = client.post(
-            path: "buildQueue",
-            requestContentType: ContentType.XML,
-            body: buildRequest
-        )
-        if (!response.success) {
-            throw new RuntimeException("Cannot schedule build job. build request: $buildRequest\nresponse: ${xmlToString(response.data)}")
-        }
-        def workerBuildId = response.data.@id
-        def scheduledChangeId = findLastChangeIdInXml(response.data)
-        if (lastChangeId && scheduledChangeId != lastChangeId) {
-            throw new RuntimeException("The requested change id is different than the actual one. requested change id: $lastChangeId in coordinatorBuildId: $coordinatorBuildId , actual change id: $scheduledChangeId in workerBuildId: $workerBuildId\nresponse: ${xmlToString(response.data)}")
-        }
-        scheduledBuilds += workerBuildId
+        throw new GradleException('Groovy HTTPBuilder not available in Debian')
     }
 
     @TypeChecked(TypeCheckingMode.SKIP)
@@ -234,24 +203,7 @@
 
     @TypeChecked(TypeCheckingMode.SKIP)
     private void join(String jobId) {
-        def finished = false
-        def response
-        while (!finished) {
-            response = client.get(path: "builds/id:$jobId")
-            finished = response.data.@state == "finished"
-            if (!finished) {
-                sleep(TimeUnit.MINUTES.toMillis(1))
-            }
-        }
-        finishedBuilds += response.data
-
-        try {
-            def results = fetchTestResults(jobId, response.data)
-            testResultFilesForBuild.put(jobId, results)
-            fireTestListener(results, response.data)
-        } catch (e) {
-            e.printStackTrace(System.err)
-        }
+       throw new GradleException('Groovy HTTPBuilder not available in Debian')
     }
 
     private void fireTestListener(List<File> results, Object build) {
@@ -263,26 +215,7 @@
 
     @TypeChecked(TypeCheckingMode.SKIP)
     private def fetchTestResults(String jobId, buildData) {
-        def unzippedFiles = []
-        def artifactsUri = buildData?.artifacts?.@href?.text()
-        if (artifactsUri) {
-            def resultArtifacts = client.get(path: "${artifactsUri}/results/${project.name}/build/")
-            if (resultArtifacts.success) {
-                def zipName = "test-results-${workerTestTaskName}.zip".toString()
-                def fileNode = resultArtifacts.data.file.find {
-                    it.@name.text() == zipName
-                }
-                if (fileNode) {
-                    def resultsDirectory = new File(workerTestResultsTempDir, jobId)
-                    def contentUri = fileNode.content.@href.text()
-                    client.get(path: contentUri, contentType: ContentType.BINARY) {
-                        resp, inputStream ->
-                            unzippedFiles = unzipToDirectory(inputStream, resultsDirectory)
-                    }
-                }
-            }
-        }
-        unzippedFiles
+        throw new GradleException('Groovy HTTPBuilder not available in Debian')
     }
 
     @TypeChecked(TypeCheckingMode.SKIP)
@@ -320,11 +253,8 @@
         }
     }
 
-    private RESTClient createClient() {
-        client = new RESTClient("$teamCityUrl/httpAuth/app/rest/9.1")
-        client.auth.basic(teamCityUsername, teamCityPassword)
-        client.headers['Origin'] = teamCityUrl
-        client
+    private Object createClient() {
+        throw new GradleException('Groovy HTTPBuilder not available in Debian')
     }
 
 
